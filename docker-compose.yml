version: '3.8'

services:
  # Web Application (Node.js)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: invoice-app
    depends_on:
      - db
      - redis
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://invoiceuser:${DB_PASSWORD}@db:5432/invoices
      - REDIS_URL=redis://redis:6379
    networks:
      - invoice-network
    volumes:
      - ./uploads:/app/uploads
      - ./storage:/app/storage
    restart: unless-stopped
    
  # Database Service
  db:
    image: postgres:15-alpine
    container_name: invoice-db
    environment:
      - POSTGRES_DB=invoices
      - POSTGRES_USER=invoiceuser
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./backup:/backup
    networks:
      - invoice-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U invoiceuser -d invoices"]
      interval: 30s
      timeout: 10s
      retries: 5
    
  # Redis for session management and caching
  redis:
    image: redis:7-alpine
    container_name: invoice-redis
    volumes:
      - redis_data:/data
    networks:
      - invoice-network
    restart: unless-stopped
    
  # Reverse proxy
  nginx:
    image: nginx:alpine
    container_name: invoice-nginx
    depends_on:
      - app
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    networks:
      - invoice-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  
networks:
  invoice-network:
    driver: bridge