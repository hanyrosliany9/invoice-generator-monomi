services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: invoice-app-dev
    depends_on:
      - db
      - redis
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://invoiceuser:devpassword@db:5432/invoices
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=dev-jwt-secret-key
      - FRONTEND_URL=http://localhost:3000
      - SKIP_DB_INIT=true
      - SMTP_HOST=localhost
      - SMTP_PORT=587
      - SMTP_USER=dev@monomi.finance
      - SMTP_PASSWORD=dev-password
      - FROM_EMAIL=dev@monomi.finance
    ports:
      - "0.0.0.0:3000:3000"  # Allow LAN access for partner preview
      - "5000:5000"
      - "8080:8080"  # Production build server
      - "9229:9229" # Debug port
    volumes:
      - ./backend:/app/backend
      - ./frontend:/app/frontend
      - ./shared:/app/shared
      - ./uploads:/app/uploads
      - ./storage:/app/storage
      - ./.npmrc:/app/.npmrc
      - /app/backend/node_modules
      - /app/frontend/node_modules
      - /app/backend/dist
      - vite_cache:/tmp/.vite
      - npm_cache:/tmp/.npm
    networks:
      - invoice-network
    restart: unless-stopped
    working_dir: /app
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/api/v1/health && curl -f http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    user: root
    command: >
      sh -c "
        echo '🧹 Cleaning caches...' &&
        rm -rf /tmp/.vite/* /tmp/.npm/* &&
        cd /app/backend &&
        echo '🔧 Checking database initialization...' &&
        npx prisma migrate deploy &&
        npx prisma generate &&
        if [ \"$SKIP_DB_INIT\" = \"false\" ]; then
          echo '🌱 Running database seeding...' &&
          npx prisma db seed || echo '⚠️  Seeding failed or already completed'
        fi &&
        echo '🚀 Starting backend server...' &&
        npm run start:dev &
        cd /app/frontend &&
        echo '🚀 Starting frontend development server...' &&
        npm run dev &
        wait
      "

  db:
    image: postgres:15-alpine
    container_name: invoice-db-dev
    environment:
      - POSTGRES_DB=invoices
      - POSTGRES_USER=invoiceuser
      - POSTGRES_PASSWORD=devpassword
    ports:
      - "5436:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - invoice-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U invoiceuser -d invoices"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    
  redis:
    image: redis:7-alpine
    container_name: invoice-redis-dev
    ports:
      - "6383:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - invoice-network
    restart: unless-stopped

volumes:
  postgres_dev_data:
  redis_dev_data:
  vite_cache:
  npm_cache:
  
networks:
  invoice-network:
    driver: bridge