version: '3.8'

services:
  # Frontend Production Server
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: invoice-frontend-prod
    command: sh -c "cd /app/frontend && node server.cjs"
    environment:
      - NODE_ENV=production
      - FRONTEND_PORT=3000
      - BACKEND_URL=http://app:5000
    ports:
      - "3000:3000"
    depends_on:
      app:
        condition: service_healthy
    networks:
      - invoice-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Backend API Server (Production)
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: invoice-app-prod
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://invoiceuser:${DB_PASSWORD}@db:5432/invoices
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - FROM_EMAIL=${FROM_EMAIL}
      - CORS_ORIGIN=https://admin.monomiagency.com
      - FRONTEND_URL=https://admin.monomiagency.com
      - LOG_LEVEL=info
      - SKIP_DB_INIT=true
    networks:
      - invoice-network
    volumes:
      - ./uploads:/app/uploads:rw
      - ./storage:/app/storage:rw
      - ./logs:/app/logs:rw
      - ./backup:/app/backup:rw
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    
  # Database Service (Production)
  db:
    image: postgres:15-alpine
    container_name: invoice-db-prod
    environment:
      - POSTGRES_DB=invoices
      - POSTGRES_USER=invoiceuser
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF8
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - ./backup:/backup:rw
    networks:
      - invoice-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U invoiceuser -d invoices"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.max=10000
      -c pg_stat_statements.track=all
      -c log_statement=none
      -c log_min_duration_statement=1000
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
    
  # Redis for session management and caching (Production)
  redis:
    image: redis:7-alpine
    container_name: invoice-redis-prod
    command: redis-server --appendonly yes --requirepass "${REDIS_PASSWORD}"
    volumes:
      - redis_prod_data:/data
    networks:
      - invoice-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    
  # Reverse proxy for Cloudflare Tunnel
  nginx:
    image: nginx:alpine
    container_name: invoice-nginx-prod
    depends_on:
      app:
        condition: service_healthy
      frontend:
        condition: service_healthy
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx-cloudflare.conf:/etc/nginx/nginx.conf:ro
      - ./logs/nginx:/var/log/nginx:rw
    networks:
      - invoice-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # Cloudflare Tunnel
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: invoice-cloudflared-prod
    command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TUNNEL_TOKEN}
    depends_on:
      nginx:
        condition: service_healthy
    networks:
      - invoice-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M

  # Database backup service
  backup:
    image: postgres:15-alpine
    container_name: invoice-backup-prod
    depends_on:
      - db
    environment:
      - POSTGRES_DB=invoices
      - POSTGRES_USER=invoiceuser
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - ./backup:/backup:rw
      - ./scripts:/scripts:ro
    networks:
      - invoice-network
    restart: "no"
    command: |
      sh -c "
        while ! pg_isready -h db -U invoiceuser; do
          echo 'Waiting for database...'
          sleep 2
        done
        echo 'Database is ready, starting backup service...'
        while true; do
          pg_dump -h db -U invoiceuser -d invoices > /backup/backup_$$(date +%Y%m%d_%H%M%S).sql
          echo 'Backup completed at $$(date)'
          sleep 86400
        done
      "
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  
networks:
  invoice-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16