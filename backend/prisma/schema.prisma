// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  quotations           Quotation[]
  invoices             Invoice[]
  auditLogs            AuditLog[]
  preferences          UserPreferences?
  businessJourneyEvents BusinessJourneyEvent[]

  @@map("users")
}

// Client Management
model Client {
  id      String  @id @default(cuid())
  name    String
  email   String?
  phone   String
  address String?
  company String?
  
  // Contact details
  contactPerson String?
  
  // Business details
  paymentTerms String? // Default payment terms
  status       String  @default("active") // Client status: active, inactive
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  quotations           Quotation[]
  invoices             Invoice[]
  projects             Project[]
  businessJourneyEvents BusinessJourneyEvent[]

  @@index([name])
  @@index([email])
  @@index([createdAt])
  @@index([phone])
  // Composite indexes for client search and filtering
  @@index([status, createdAt])
  @@index([name, status])
  @@map("clients")
}

// Project Management
model Project {
  id          String      @id @default(cuid())
  number      String      @unique // Project number for reference
  description String      // Project description
  output      String      // Expected deliverables/output
  type        ProjectType // Production or Social Media
  
  // Client reference
  clientId String
  client   Client @relation(fields: [clientId], references: [id])
  
  // Project timeline
  startDate DateTime?
  endDate   DateTime?
  
  // Budget information
  estimatedBudget Decimal? @db.Decimal(12, 2)
  basePrice       Decimal? @db.Decimal(12, 2) // Base project price for cascade
  priceBreakdown  Json?                       // Detailed price items (optional)
  
  status    ProjectStatus @default(PLANNING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  quotations           Quotation[]
  invoices             Invoice[]
  businessJourneyEvents BusinessJourneyEvent[]
  documents            Document[]

  @@index([number])
  @@index([status])
  @@index([type])
  @@index([clientId])
  @@index([createdAt])
  // Composite indexes for performance optimization
  @@index([clientId, status])
  @@index([type, status])
  @@index([status, createdAt])
  @@map("projects")
}

// Quotation Management
model Quotation {
  id              String          @id @default(cuid())
  quotationNumber String          @unique
  date            DateTime        @default(now())
  validUntil      DateTime
  
  // Client information
  clientId String
  client   Client @relation(fields: [clientId], references: [id])
  
  // Project information
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  
  // Financial details
  amountPerProject Decimal @db.Decimal(12, 2)
  totalAmount      Decimal @db.Decimal(12, 2)
  
  // Terms and conditions
  terms String?
  
  // Status management
  status QuotationStatus @default(DRAFT)
  
  // User tracking
  createdBy String
  user      User   @relation(fields: [createdBy], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  invoices             Invoice[]
  businessJourneyEvents BusinessJourneyEvent[]
  documents            Document[]

  @@index([quotationNumber])
  @@index([status])
  @@index([clientId])
  @@index([projectId])
  @@index([createdAt])
  @@index([validUntil])
  // Composite indexes for performance optimization
  @@index([clientId, status])
  @@index([status, validUntil])
  @@index([projectId, status])
  @@index([createdAt, status])
  @@map("quotations")
}

// Invoice Management
model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  creationDate  DateTime      @default(now())
  dueDate       DateTime
  
  // Reference to quotation (optional - invoices can be standalone)
  quotationId String?
  quotation   Quotation? @relation(fields: [quotationId], references: [id])
  
  // Client information (denormalized for invoice independence)
  clientId String
  client   Client @relation(fields: [clientId], references: [id])
  
  // Project information (denormalized)
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  
  // Financial details
  amountPerProject Decimal @db.Decimal(12, 2)
  totalAmount      Decimal @db.Decimal(12, 2)
  
  // Payment information
  paymentInfo String // Bank details, payment methods
  
  // Indonesian compliance
  materaiRequired Boolean @default(false) // Auto-calculated if > 5M IDR
  materaiApplied  Boolean @default(false) // User confirms materai applied
  materaiAppliedAt DateTime? // When materai was applied
  materaiAppliedBy String? // User who applied materai
  materaiAmount   Decimal? @db.Decimal(12, 2) // Amount of stamp duty
  
  // Terms and signature
  terms     String?
  signature String? // Digital signature or file path
  
  // Status management
  status InvoiceStatus @default(DRAFT)
  
  // User tracking
  createdBy String
  user      User   @relation(fields: [createdBy], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  payments             Payment[]
  businessJourneyEvents BusinessJourneyEvent[]
  documents            Document[]

  @@index([invoiceNumber])
  @@index([status])
  @@index([clientId])
  @@index([projectId])
  @@index([createdAt])
  @@index([dueDate])
  @@index([materaiRequired])
  @@index([quotationId])
  // Composite indexes for performance optimization - Critical queries
  @@index([clientId, status])
  @@index([status, dueDate])
  @@index([status, createdAt])
  @@index([materaiRequired, totalAmount])
  @@index([materaiRequired, materaiApplied, status])
  @@index([createdAt, status])
  @@map("invoices")
}

// Payment Tracking
model Payment {
  id                String        @id @default(cuid())
  invoiceId         String
  invoice           Invoice       @relation(fields: [invoiceId], references: [id])
  amount            Decimal       @db.Decimal(12, 2)
  paymentDate       DateTime
  paymentMethod     PaymentMethod
  transactionRef    String?       // Reference from payment gateway
  bankDetails       String?       // Bank transfer details
  status            PaymentStatus @default(PENDING)
  confirmedAt       DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  businessJourneyEvents BusinessJourneyEvent[]

  // Indexes for performance optimization
  @@index([invoiceId])
  @@index([status])
  @@index([paymentDate])
  @@index([paymentMethod])
  // Composite indexes for common queries
  @@index([status, paymentDate])
  @@index([invoiceId, status])
  @@map("payments")
}

// Business Journey Tracking
model BusinessJourneyEvent {
  id          String                       @id @default(cuid())
  type        BusinessJourneyEventType
  title       String
  description String
  status      BusinessJourneyEventStatus   @default(PENDING)
  amount      Decimal?                     @db.Decimal(12, 2)
  
  // Entity relationships
  clientId     String?
  client       Client?    @relation(fields: [clientId], references: [id])
  projectId    String?
  project      Project?   @relation(fields: [projectId], references: [id])
  quotationId  String?
  quotation    Quotation? @relation(fields: [quotationId], references: [id])
  invoiceId    String?
  invoice      Invoice?   @relation(fields: [invoiceId], references: [id])
  paymentId    String?
  payment      Payment?   @relation(fields: [paymentId], references: [id])
  
  // Metadata
  metadata BusinessJourneyEventMetadata?
  
  // User tracking
  createdBy String
  user      User   @relation(fields: [createdBy], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type])
  @@index([status])
  @@index([clientId])
  @@index([projectId])
  @@index([quotationId])
  @@index([invoiceId])
  @@index([createdAt])
  @@index([amount])
  // Composite indexes for business analytics and timeline queries
  @@index([clientId, type, createdAt])
  @@index([clientId, status, createdAt])
  @@index([type, status])
  @@index([status, createdAt])
  @@map("business_journey_events")
}

// Business Journey Event Metadata
model BusinessJourneyEventMetadata {
  id       String @id @default(cuid())
  eventId  String @unique
  event    BusinessJourneyEvent @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  // User information
  userCreated   String
  userModified  String?
  
  // System information
  source       BusinessJourneyEventSource @default(SYSTEM)
  priority     BusinessJourneyPriority    @default(MEDIUM)
  
  // Additional data
  tags              String[] // Array of tags
  relatedDocuments  String[] // Array of document IDs
  notes             String?
  ipAddress         String?
  userAgent         String?
  
  // Indonesian business context
  materaiRequired   Boolean @default(false)
  materaiAmount     Decimal? @db.Decimal(12, 2)
  complianceStatus  String? // Compliance status with Indonesian regulations
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([source])
  @@index([priority])
  @@index([materaiRequired])
  @@map("business_journey_event_metadata")
}

// UX Analytics for Performance Monitoring
model UXMetrics {
  id            String   @id @default(cuid())
  componentName String
  eventType     String   // 'render', 'interaction', 'error'
  metricName    String   // 'load_time', 'interaction_delay', etc.
  value         Float
  
  // Context
  userId        String?
  sessionId     String?
  clientId      String?
  url           String?
  userAgent     String?
  
  // Performance data
  performanceData Json? // Core Web Vitals and other metrics
  
  createdAt DateTime @default(now())

  @@index([componentName])
  @@index([eventType])
  @@index([metricName])
  @@index([userId])
  @@index([createdAt])
  @@map("ux_metrics")
}

// Audit Trail
model AuditLog {
  id         String   @id @default(cuid())
  action     String   // CREATE, UPDATE, DELETE
  entityType String   // quotation, invoice, etc.
  entityId   String   // ID of the affected entity
  oldValues  Json?    // Previous state
  newValues  Json?    // New state
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  @@map("audit_logs")
}

// Enums
enum UserRole {
  ADMIN
  USER
  VIEWER
}

enum ProjectType {
  PRODUCTION
  SOCIAL_MEDIA
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum QuotationStatus {
  DRAFT
  SENT
  APPROVED
  DECLINED
  REVISED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum PaymentMethod {
  BANK_TRANSFER
  CASH
  OTHER
}

enum PaymentStatus {
  PENDING
  CONFIRMED
  FAILED
  REFUNDED
}

// Business Journey Enums
enum BusinessJourneyEventType {
  CLIENT_CREATED
  PROJECT_STARTED
  QUOTATION_DRAFT
  QUOTATION_SENT
  QUOTATION_APPROVED
  QUOTATION_DECLINED
  QUOTATION_REVISED
  INVOICE_GENERATED
  INVOICE_SENT
  PAYMENT_RECEIVED
  PAYMENT_OVERDUE
  MATERAI_REQUIRED
  MATERAI_APPLIED
}

enum BusinessJourneyEventStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  REQUIRES_ATTENTION
}

enum BusinessJourneyEventSource {
  SYSTEM
  USER
  API
  WEBHOOK
}

enum BusinessJourneyPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// Settings Models
model UserPreferences {
  id                  String  @id @default(cuid())
  userId              String  @unique
  user                User    @relation(fields: [userId], references: [id])
  timezone            String  @default("Asia/Jakarta")
  language            String  @default("id-ID")
  currency            String  @default("IDR")
  emailNotifications  Boolean @default(true)
  pushNotifications   Boolean @default(true)
  theme               String  @default("light")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_preferences")
}

model CompanySettings {
  id          String  @id @default("default")
  companyName String  @default("PT Teknologi Indonesia")
  address     String?
  phone       String?
  email       String?
  website     String?
  taxNumber   String? // NPWP
  currency    String  @default("IDR")
  
  // Bank accounts
  bankBCA     String?
  bankMandiri String?
  bankBNI     String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("company_settings")
}

model SystemSettings {
  id                    String  @id @default("default")
  defaultPaymentTerms   String  @default("NET 30")
  materaiThreshold      Int     @default(5000000)
  invoicePrefix         String  @default("INV-")
  quotationPrefix       String  @default("QT-")
  autoBackup            Boolean @default(true)
  backupFrequency       String  @default("daily")
  backupTime            String  @default("02:00")
  autoMateraiReminder   Boolean @default(true)
  defaultCurrency       String  @default("IDR")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}

// Feature Flags System
model FeatureFlag {
  id            String   @id @default(cuid())
  name          String   @unique
  description   String?
  enabled       Boolean  @default(false)
  globalEnabled Boolean  @default(false)
  targetUsers   String[] // Array of user IDs
  targetGroups  String[] // Array of group names
  rules         Json?    // Additional targeting rules
  expiresAt     DateTime?
  disabledReason String?
  disabledAt    DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  events FeatureFlagEvent[]
  
  @@map("feature_flags")
}

model FeatureFlagEvent {
  id           String    @id @default(cuid())
  flagId       String
  flag         FeatureFlag @relation(fields: [flagId], references: [id])
  userId       String?
  eventType    String    // 'enabled', 'disabled', 'viewed', 'clicked'
  metadata     Json?
  
  createdAt DateTime @default(now())
  
  @@index([flagId])
  @@index([userId])
  @@index([eventType])
  @@map("feature_flag_events")
}

// Document Management
model Document {
  id               String       @id @default(cuid())
  fileName         String
  originalFileName String
  filePath         String
  fileSize         Int          // Size in bytes
  mimeType         String
  category         DocumentCategory @default(OTHER)
  description      String?
  
  // Entity relationships - documents can be attached to invoices, quotations, or projects
  invoiceId   String?
  invoice     Invoice?   @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  quotationId String?
  quotation   Quotation? @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  projectId   String?
  project     Project?   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  // User tracking
  uploadedBy String
  uploadedAt DateTime @default(now())
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([invoiceId])
  @@index([quotationId])
  @@index([projectId])
  @@index([category])
  @@index([mimeType])
  @@index([uploadedAt])
  @@map("documents")
}

enum DocumentCategory {
  SUPPORTING_DOCUMENT
  CONTRACT
  RECEIPT
  INVOICE_ATTACHMENT
  OTHER
}